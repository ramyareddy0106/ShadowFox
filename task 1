!pip install nltk
import nltk

# Download the 'punkt_tab' resource
nltk.download('punkt_tab')

import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense
import nltk
from nltk.tokenize import word_tokenize
import difflib

# Sample small dataset
corpus = [
    "hello how are you",
    "how is your day",
    "what is your name",
    "where are you going",
    "I love machine learning",
    "deep learning is amazing",
]

# Tokenize the corpus
tokenizer = Tokenizer()
tokenizer.fit_on_texts(corpus)
word_index = tokenizer.word_index
vocab_size = len(word_index) + 1

# Convert sentences to sequences
sequences = tokenizer.texts_to_sequences(corpus)

# Prepare input-output pairs
X, y = [], []
for seq in sequences:
    for i in range(1, len(seq)):
        X.append(seq[:i])
        y.append(seq[i])

# Pad sequences
X = pad_sequences(X, maxlen=4)
y = np.array(y)

# Convert output labels to categorical
y = tf.keras.utils.to_categorical(y, num_classes=vocab_size)
# Build model
model = Sequential([
    Embedding(vocab_size, 10, input_length=4),
    LSTM(64),
    Dense(vocab_size, activation="softmax")
])

model.compile(loss="categorical_crossentropy", optimizer="adam", metrics=["accuracy"])
model.fit(X, y, epochs=100, verbose=1)
# Autocorrect function
def autocorrect(word, word_list):
    suggestions = difflib.get_close_matches(word, word_list, n=1)
    return suggestions[0] if suggestions else word

# Predict next word
def predict_next_word(text):
    words = word_tokenize(text.lower())
    words = [autocorrect(w, word_index.keys()) for w in words]
    seq = tokenizer.texts_to_sequences([words])[0]
    seq = pad_sequences([seq], maxlen=4)

    predicted_index = np.argmax(model.predict(seq))
    return tokenizer.index_word.get(predicted_index, "Unknown")

# Test the system
print("Predicted next word:", predict_next_word("how are"))   
